[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "ombm"
version = "0.1.0"
description = "Organize My Bookmarks - A macOS CLI tool for semantically organizing Safari bookmarks"
readme = "README.md"
license = "MIT"
authors = [
    { name = "Farhan Kazmi", email = "farhan@example.com" },
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Environment :: Console",
    "Intended Audience :: End Users/Desktop",
    "License :: OSI Approved :: MIT License",
    "Operating System :: MacOS",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Internet :: WWW/HTTP :: Browsers",
    "Topic :: System :: Systems Administration",
    "Topic :: Utilities",
]
requires-python = ">=3.11"
dependencies = [
    "typer[all]>=0.12.0",
    "rich>=13.0.0",
    "playwright>=1.44.0",
    "openai>=1.16.0",
    "aiosqlite>=0.20.0",
    "httpx>=0.25.0",
    "readability-lxml>=0.8.0",
    "beautifulsoup4>=4.12.0",
    "anyio>=4.0.0",
    "structlog>=24.0.0",
    "keyring>=24.0.0",
    "tomli>=2.0.0; python_version<'3.11'",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "ruff>=0.4.0",
    "mypy>=1.5.0",
    "respx>=0.20.0",
    "responses>=0.23.0",
]
test = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "respx>=0.20.0",
    "responses>=0.23.0",
]

[project.scripts]
ombm = "ombm.__main__:app"

[project.urls]
Homepage = "https://github.com/farhankazmi/ombm"
Repository = "https://github.com/farhankazmi/ombm"
Issues = "https://github.com/farhankazmi/ombm/issues"

[tool.hatch.build.targets.wheel]
packages = ["ombm"]

[tool.ruff]
line-length = 88
target-version = "py311"

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
]
ignore = [
    "E501",  # line too long (handled by black)
    "B008",  # do not perform function calls in argument defaults
    "ARG001", # unused function argument
    "ARG002", # unused method argument
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["ARG001", "ARG002", "S101"]

[tool.ruff.lint.isort]
known-first-party = ["ombm"]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "playwright.*",
    "readability.*",
    "applescript.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=ombm",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
asyncio_mode = "auto"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "e2e: marks tests as end-to-end tests",
]

[tool.coverage.run]
source = ["ombm"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__main__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
